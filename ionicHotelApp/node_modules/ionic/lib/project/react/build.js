"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const build_1 = require("../../build");
const color_1 = require("../../color");
class ReactBuildRunner extends build_1.BuildRunner {
    constructor(e) {
        super();
        this.e = e;
    }
    async getCommandMetadata() {
        return {
            description: `
    ${color_1.input('ionic build')} uses React Scripts. See the ${color_1.input('create-react-app')} docs[^cra-build-docs] for explanations. This command interprets the arguments to environment variables supported by React Scripts.
      `,
            footnotes: [
                {
                    id: 'cra-build-docs',
                    url: 'https://facebook.github.io/create-react-app/docs/advanced-configuration',
                },
            ],
            options: [
                {
                    name: 'public-url',
                    summary: `You may use this variable to force assets to be referenced verbatim to the url you provide (hostname included). `,
                    type: String,
                    groups: ['cordova'],
                },
                {
                    name: 'ci',
                    summary: `Treat all warnings as build failures. Also makes the test runner non-watching.`,
                    type: Boolean,
                    groups: ['cordova'],
                },
                {
                    name: 'source-map',
                    summary: `When set to false, source maps are not generated.`,
                    type: Boolean,
                    groups: ['cordova'],
                },
                {
                    name: 'inline-runtime-chunk',
                    summary: `By default a runtime script is included in index.html. When set to false, the script will not be embedded and will be imported as usual. This is normally required when dealing with CSP.`,
                    type: Boolean,
                    groups: ['cordova'],
                },
            ],
            groups: ["beta" /* BETA */],
        };
    }
    createOptionsFromCommandLine(inputs, options) {
        const baseOptions = super.createBaseOptionsFromCommandLine(inputs, options);
        const publicUrl = options['public-url'] ? String(options['public-url']) : undefined;
        const ci = options['ci'] ? Boolean(options['ci']) : undefined;
        const sourceMap = options['source-map'] ? Boolean(options['source-map']) : undefined;
        const inlineRuntimeChunk = options['inline-runtime-check'] ? Boolean(options['inline-runtime-check']) : undefined;
        return {
            ...baseOptions,
            type: 'react',
            publicUrl,
            ci,
            sourceMap,
            inlineRuntimeChunk,
        };
    }
    async buildProject(options) {
        const reactScripts = new ReactBuildCLI(this.e);
        await reactScripts.build(options);
    }
}
exports.ReactBuildRunner = ReactBuildRunner;
class ReactBuildCLI extends build_1.BuildCLI {
    constructor() {
        super(...arguments);
        this.name = 'React Scripts';
        this.pkg = 'react-scripts';
        this.program = 'react-scripts';
        this.prefix = 'react-scripts';
        this.script = build_1.BUILD_SCRIPT;
    }
    async buildArgs(options) {
        const { pkgManagerArgs } = await Promise.resolve().then(() => require('../../utils/npm'));
        if (this.resolvedProgram === this.program) {
            return ['build'];
        }
        else {
            const [, ...pkgArgs] = await pkgManagerArgs(this.e.config.get('npmClient'), { command: 'run', script: this.script });
            return pkgArgs;
        }
    }
    async buildEnvVars(options) {
        const envVars = {};
        if (options.publicUrl) {
            envVars.PUBLIC_URL = options.publicUrl;
        }
        envVars.CI = String(options.ci);
        envVars.GENERATE_SOURCEMAP = String(options.sourceMap);
        envVars.INLINE_RUNTIME_CHUNK = String(options.inlineRuntimeChunk);
        return envVars;
    }
}
exports.ReactBuildCLI = ReactBuildCLI;
