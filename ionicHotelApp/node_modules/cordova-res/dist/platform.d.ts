/// <reference types="node" />
import { ImageSchema } from './image';
import { ColorSource, ImageSource, ImageSourceData, ResolvedImageSource, ResolvedSource, ResourceKey, ResourceKeyValues, ResourceNodeAttribute, ResourceType, ResourcesTypeConfig } from './resources';
export declare const enum Platform {
    ANDROID = "android",
    IOS = "ios",
    WINDOWS = "windows"
}
export declare const PLATFORMS: ReadonlyArray<Platform>;
export interface GeneratedResource extends ResourceKeyValues {
    type: ResourceType;
    platform: Platform;
    nodeName: string;
    nodeAttributes: ReadonlyArray<ResourceNodeAttribute>;
    indexAttribute: ResourceNodeAttribute;
}
export interface SimpleResourceOptions {
    /**
     * Paths to source images to use for this resource.
     */
    sources: (string | ImageSource)[];
}
export interface SimpleResourceResult {
    resources: GeneratedResource[];
    source: ResolvedSource;
}
export interface AdaptiveIconResourceOptions {
    /**
     * Provides options for an optional fallback for Android devices that do not support adaptive icons.
     *
     * @see https://cordova.apache.org/docs/en/dev/config_ref/images.html#adaptive-icons
     */
    icon?: SimpleResourceOptions;
    /**
     * Options for the foreground portion of adaptive icons.
     */
    foreground: SimpleResourceOptions;
    /**
     * Options for the background portion of adaptive icons.
     */
    background: {
        /**
         * Paths to source images or colors to use for this resource.
         */
        sources: (string | ImageSource | ColorSource)[];
    };
}
export interface RunPlatformOptions {
    [ResourceType.ADAPTIVE_ICON]?: AdaptiveIconResourceOptions;
    [ResourceType.ICON]?: SimpleResourceOptions;
    [ResourceType.SPLASH]?: SimpleResourceOptions;
}
export interface RunPlatformResult {
    resources: GeneratedResource[];
    sources: ResolvedSource[];
}
/**
 * Run resource generation for the given platform.
 */
export declare function run(platform: Platform, resourcesDirectory: string, options: Readonly<RunPlatformOptions>, errstream?: NodeJS.WritableStream): Promise<RunPlatformResult>;
/**
 * Attempt to generate icons or splash screens for any platform.
 *
 * If there are no options given for this resource or if the source images are
 * not suitable, this function resolves with `undefined`.
 */
export declare function safelyGenerateSimpleResources(type: ResourceType.ICON | ResourceType.SPLASH, platform: Platform, resourcesDirectory: string, options?: Readonly<SimpleResourceOptions>, errstream?: NodeJS.WritableStream): Promise<SimpleResourceResult | undefined>;
/**
 * Generate simple icons or splash screens.
 *
 * Icon and Splash Screen generation is "simple" because there's one source
 * image type and one set of resources to generate.
 *
 * If there are no options given for this resource, this function resolves
 * with `undefined`.
 */
export declare function generateSimpleResources(type: ResourceType.ICON | ResourceType.SPLASH, platform: Platform, resourcesDirectory: string, options?: Readonly<SimpleResourceOptions>, errstream?: NodeJS.WritableStream): Promise<SimpleResourceResult | undefined>;
/**
 * Attempt to generate Adaptive Icons for any platform.
 *
 * If there are no options given for this resource or if the platform or
 * source images are not suitable, this function resolves with `undefined`.
 */
export declare function safelyGenerateAdaptiveIconResources(platform: Platform, resourcesDirectory: string, options?: Readonly<AdaptiveIconResourceOptions>, errstream?: NodeJS.WritableStream): Promise<RunPlatformResult | undefined>;
/**
 * Generate Android Adaptive Icons.
 */
export declare function generateAdaptiveIconResources(resourcesDirectory: string, options: Readonly<AdaptiveIconResourceOptions>, errstream?: NodeJS.WritableStream): Promise<RunPlatformResult>;
export declare function consolidateAdaptiveIconResources(foregrounds: ReadonlyArray<GeneratedResource>, backgrounds: ReadonlyArray<GeneratedResource>): Promise<GeneratedResource[]>;
/**
 * Generate the foreground of Adaptive Icons.
 */
export declare function generateAdaptiveIconResourcesPortion(resourcesDirectory: string, type: ResourceKey.FOREGROUND | ResourceKey.BACKGROUND, sources: (string | ImageSource)[], errstream?: NodeJS.WritableStream): Promise<SimpleResourceResult>;
export declare function generateAdaptiveIconResourcesPortionFromImageSource(resourcesDirectory: string, type: ResourceKey.FOREGROUND | ResourceKey.BACKGROUND, source: ResolvedImageSource, errstream?: NodeJS.WritableStream): Promise<GeneratedResource[]>;
export declare function generateImageResource(type: ResourceType, platform: Platform, resourcesDirectory: string, config: ResourcesTypeConfig<unknown>, image: ImageSourceData, schema: ImageSchema, errstream?: NodeJS.WritableStream): Promise<GeneratedResource>;
export declare function imageSourceToPath(source: string | ImageSource): string;
export declare function resolveSource(platform: Platform, type: ResourceType, name: string, sources: ReadonlyArray<string | ImageSource | ColorSource>, errstream?: NodeJS.WritableStream): Promise<ResolvedSource>;
export declare function validatePlatforms(platforms: ReadonlyArray<string>): Platform[];
export declare function filterSupportedPlatforms(platforms: ReadonlyArray<string>): Platform[];
export declare function isSupportedPlatform(platform: any): platform is Platform;
