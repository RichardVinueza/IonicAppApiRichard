/// <reference types="node" />
import { Platform, RunPlatformOptions } from './platform';
import { Density, Orientation, SourceType } from './resources';
interface Result {
    resources: ResultResource[];
    sources: ResultSource[];
}
interface ResultResource {
    src?: string;
    dest?: string;
    platform?: Platform;
    width?: number;
    height?: number;
    density?: Density;
    orientation?: Orientation;
    target?: string;
}
interface ResultSource {
    type: SourceType;
    value: string;
}
declare function CordovaRes({ directory, resourcesDirectory, logstream, errstream, platforms, }?: CordovaRes.Options): Promise<Result>;
declare namespace CordovaRes {
    type PlatformOptions = {
        [P in Platform]?: Readonly<RunPlatformOptions>;
    };
    const run: typeof CordovaRes;
    /**
     * Options for `cordova-res`.
     *
     * Each key may be excluded to use a provided default.
     */
    interface Options {
        /**
         * Operating directory. Usually the root of the project.
         *
         * `cordova-res` operates in the root of a standard Cordova project setup.
         * The specified directory should contain `config.xml` and a resources
         * folder, configured via `resourcesDirectory`.
         */
        readonly directory?: string;
        /**
         * Directory name or absolute path to resources directory.
         *
         * The resources directory contains the source images and generated images
         * of a Cordova project's resources.
         */
        readonly resourcesDirectory?: string;
        /**
         * Specify an alternative output mechanism.
         *
         * A NullStream may be used to silence output entirely.
         */
        readonly logstream?: NodeJS.WritableStream;
        /**
         * Specify an alternative error output mechanism.
         *
         * A NullStream may be used to silence error output entirely.
         */
        readonly errstream?: NodeJS.WritableStream;
        /**
         * Resource generation configuration by platform.
         *
         * Each key/value represents the options for a supported platform. If
         * provided, resources are generated in an explicit, opt-in manner.
         */
        readonly platforms?: Readonly<PlatformOptions>;
    }
    function runCommandLine(args: ReadonlyArray<string>): Promise<void>;
}
export = CordovaRes;
