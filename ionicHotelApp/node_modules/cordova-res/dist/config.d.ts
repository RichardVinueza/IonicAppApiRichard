/// <reference types="node" />
import et from 'elementtree';
import { GeneratedResource, Platform } from './platform';
import { ResolvedColorSource, ResolvedSource, ResourceNodeAttribute } from './resources';
export declare function getConfigPath(directory: string): string;
export declare function run(configPath: string, resourcesDirectory: string, doc: et.ElementTree, sources: ReadonlyArray<ResolvedSource>, resources: ReadonlyArray<GeneratedResource>, errstream?: NodeJS.WritableStream): Promise<void>;
export declare function resolveColorsDocument(colorsPath: string): Promise<et.ElementTree>;
export declare function runColorsConfig(colorsPath: string, colors: ReadonlyArray<ResolvedColorSource>): Promise<void>;
export declare function runConfig(configPath: string, doc: et.ElementTree, resources: ReadonlyArray<GeneratedResource>, errstream?: NodeJS.WritableStream): void;
export declare function conformPath(configPath: string, value: string | number): string;
export declare function runResource(configPath: string, container: et.Element, resource: GeneratedResource): void;
export declare function resolvePlatformElement(container: et.Element, platform: Platform): et.Element;
export declare function resolveResourceElement(container: et.Element, nodeName: string, indexAttr: ResourceNodeAttribute, index: string): et.Element;
export declare function groupImages(images: ReadonlyArray<GeneratedResource>): Map<Platform, GeneratedResource[]>;
export declare function read(path: string): Promise<et.ElementTree>;
export declare function write(path: string, doc: et.ElementTree): Promise<void>;
export declare function getPlatforms(container: et.Element): string[];
export declare function getPreference(container: et.Element, name: string): string | undefined;
