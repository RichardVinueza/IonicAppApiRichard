import { Metadata, Sharp } from 'sharp';
import { Platform } from './platform';
export declare const DEFAULT_RESOURCES_DIRECTORY = "resources";
export declare const enum ResourceType {
    ADAPTIVE_ICON = "adaptive-icon",
    ICON = "icon",
    SPLASH = "splash"
}
export declare const RESOURCE_TYPES: ReadonlyArray<ResourceType>;
export declare const enum SourceType {
    RASTER = "raster",
    COLOR = "color"
}
/**
 * Windows targets
 * @see https://cordova.apache.org/docs/en/latest/config_ref/images.html#windows
 *
 */
export declare const enum WindowsTarget {
    STORE_LOGO = "StoreLogo",
    SQUARE_30_X_30_LOGO = "Square30x30Logo",
    SQUARE_44_X_44_LOGO = "Square44x44Logo",
    SQUARE_70_X_70_LOGO = "Square70x70Logo",
    SQUARE_71_X_71_LOGO = "Square71x71Logo",
    SQUARE_150_X_150_LOGO = "Square150x150Logo",
    SQUARE_310_X_310_LOGO = "Square310x310Logo",
    WIDE_310_X_150_LOGO = "Wide310x150Logo",
    SPLASH_SCREEN = "SplashScreen"
}
export interface ImageSource {
    type: SourceType.RASTER;
    /**
     * Path to source image.
     */
    src: string;
}
export interface ColorSource {
    type: SourceType.COLOR;
    /**
     * Hex value.
     */
    color: string;
}
export declare type Source = ImageSource | ColorSource;
export interface ImageSourceData {
    src: string;
    pipeline: Sharp;
    metadata: Metadata;
}
export interface ResolvedImageSource extends ImageSource {
    platform: Platform;
    resource: ResourceType;
    image: ImageSourceData;
}
export interface ResolvedColorSource extends ColorSource {
    platform: Platform;
    resource: ResourceType;
    name: string;
}
export declare type ResolvedSource = ResolvedImageSource | ResolvedColorSource;
export declare const RESOURCE_FORMATS: ReadonlyArray<Format>;
export declare const RESOURCE_RASTER_FORMATS: ReadonlyArray<Format>;
export declare type ResourceValidator = (source: string, pipeline: Sharp) => Promise<Metadata>;
export declare function isResourceFormat(format: any): format is Format;
export declare function isRasterResourceFormat(format: any): format is Format;
export declare const COLOR_REGEX: RegExp;
export declare const RASTER_RESOURCE_VALIDATORS: {
    readonly [T in ResourceType]: ResourceValidator;
};
export declare const enum Format {
    PNG = "png",
    JPEG = "jpeg",
    NONE = "none"
}
export declare const enum Orientation {
    LANDSCAPE = "landscape",
    PORTRAIT = "portrait"
}
export declare const enum Density {
    LDPI = "ldpi",
    MDPI = "mdpi",
    HDPI = "hdpi",
    XHDPI = "xhdpi",
    XXHDPI = "xxhdpi",
    XXXHDPI = "xxxhdpi",
    LAND_LDPI = "land-ldpi",
    LAND_MDPI = "land-mdpi",
    LAND_HDPI = "land-hdpi",
    LAND_XHDPI = "land-xhdpi",
    LAND_XXHDPI = "land-xxhdpi",
    LAND_XXXHDPI = "land-xxxhdpi",
    PORT_LDPI = "port-ldpi",
    PORT_MDPI = "port-mdpi",
    PORT_HDPI = "port-hdpi",
    PORT_XHDPI = "port-xhdpi",
    PORT_XXHDPI = "port-xxhdpi",
    PORT_XXXHDPI = "port-xxxhdpi"
}
export declare const enum ResourceKey {
    SRC = "src",
    FOREGROUND = "foreground",
    BACKGROUND = "background",
    FORMAT = "format",
    WIDTH = "width",
    HEIGHT = "height",
    DENSITY = "density",
    ORIENTATION = "orientation",
    TARGET = "target"
}
export interface ResourceKeyValues {
    readonly [ResourceKey.SRC]?: string;
    readonly [ResourceKey.FOREGROUND]?: string;
    readonly [ResourceKey.BACKGROUND]?: string;
    readonly [ResourceKey.FORMAT]?: Format;
    readonly [ResourceKey.WIDTH]?: number;
    readonly [ResourceKey.HEIGHT]?: number;
    readonly [ResourceKey.DENSITY]?: Density;
    readonly [ResourceKey.ORIENTATION]?: Orientation;
    readonly [ResourceKey.TARGET]?: string;
}
export interface ResourcesImageConfig {
    readonly [ResourceKey.SRC]: string;
    readonly [ResourceKey.FORMAT]: Format;
    readonly [ResourceKey.WIDTH]: number;
    readonly [ResourceKey.HEIGHT]: number;
    readonly [ResourceKey.DENSITY]?: Density;
    readonly [ResourceKey.ORIENTATION]?: Orientation;
    readonly [ResourceKey.TARGET]?: string;
}
export interface AndroidAdaptiveIconConfig {
    readonly [ResourceKey.FOREGROUND]: string;
    readonly [ResourceKey.BACKGROUND]: string;
    readonly [ResourceKey.FORMAT]: Format;
    readonly [ResourceKey.WIDTH]: number;
    readonly [ResourceKey.HEIGHT]: number;
    readonly [ResourceKey.DENSITY]?: Density;
}
export declare const enum ResourceNodeAttributeType {
    PATH = "path"
}
export interface ResourceNodeAttribute {
    readonly key: ResourceKey;
    readonly type?: ResourceNodeAttributeType;
}
export interface ResourcesTypeConfig<C = ResourcesImageConfig> {
    readonly resources: ReadonlyArray<C>;
    readonly nodeName: string;
    readonly nodeAttributes: ReadonlyArray<ResourceNodeAttribute>;
    /**
     * Uniquely identifies a node.
     *
     * Use `nodeName` and this attribute to look up existing nodes in Cordova config.
     */
    readonly indexAttribute: ResourceNodeAttribute;
}
export declare type ResourcesPlatform = {
    readonly [T in ResourceType.ICON | ResourceType.SPLASH]: ResourcesTypeConfig;
};
export declare type ResourcesConfig = {
    readonly [P in Platform]: ResourcesPlatform;
};
export declare function validateResourceTypes(types: ReadonlyArray<string>): ResourceType[];
export declare function isSupportedResourceType(type: any): type is ResourceType;
export declare function getResourcesConfig(platform: Platform.ANDROID, type: ResourceType.ADAPTIVE_ICON): ResourcesTypeConfig<AndroidAdaptiveIconConfig>;
export declare function getResourcesConfig(platform: Platform, type: ResourceType): ResourcesTypeConfig;
